// Sass String(字符串) 函数
/* Sass String(字符串) 函数用于处理字符串并获取相关信息。

Sass 字符串的起始索引值从 1 开始，记住不是 0。 */
/* 加引号 */
quote(string)
/* 移除字符串的引号*/
unquote("runoob")
/* 返回 substring 子字符串第一次在 string 中出现的位置。如果没有匹配到子字符串，则返回 null */
str-index(abcd, a)  => 1
str-index(abcd, ab) => 1
str-index(abcd, X)  => null
str-index(abcd, c)  => 3

/* 在字符串 string 中 index 位置插入 insert。 */
str-insert("Hello world!", " runoob", 6)

/* 长度 */
str-length("runoob")

/* 从 string 中截取子字符串，通过 start-at 和 end-at 设置始末位置，未指定结束索引值则默认截取到字符串末尾 */
str-slice("abcd", 2, 3)   => "bc"
str-slice("abcd", 2)      => "bcd"
str-slice("abcd", -3, -2) => "bc"
str-slice("abcd", 2, -2)  => "bc
/* 大小写 */
to-lower-case(string)
to-upper-case(string)

/* 返回一个无引号的随机字符串作为 id。不过也只能保证在单次的 Sass 编译中确保这个 id 的唯一性。 */
unique-id()



//列表
append(list, value, [separator])
index(list, value)
is-bracketed(list)

join(list1, list2, [separator, bracketed])
join(a b c, d e f)
结果: a b c d e f
join((a b c), (d e f), comma)
结果: a, b, c, d, e, f
join(a b c, d e f, $bracketed: true)
结果: [a b c d e f]

length(list)

list-separator(list)
list-separator(a b c)
结果: "space"
list-separator(a, b, c)
结果: "comma"

nth(list, n)	获取第 n 项的值。
实例:
nth(a b c, 3)
结果: c

set-nth(list, n, value)	设置列表第 n 项的值为 value。
实例:
set-nth(a b c, 2, x)
结果: a x c


zip(lists)	将多个列表按照以相同索引值为一组，重新组成一个新的多维度列表。
实例:
zip(1px 2px 3px, solid dashed dotted, red green blue)
结果: 1px solid red, 2px dashed green, 3px dotted blue



//映射
map-get(map, key)	返回 Map 中 key 所对应的 value(值)。如没有对应的 key，则返回 null 值。
实例:
$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
map-get($font-sizes, "small")
结果: 12px

map-has-key(map, key)	判断 map 是否有对应的 key，存在返回 true，否则返回 false。
实例:
$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
map-has-key($font-sizes, "big")
结果: false

map-keys(map)	返回 map 中所有的 key 组成的队列。
实例:
$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
map-keys($font-sizes)
结果: "small", "normal, "large"

map-merge(map1, map2)	合并两个 map 形成一个新的 map 类型，即将 map2 添加到 map1的尾部
实例:
$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
$font-sizes2: ("x-large": 30px, "xx-large": 36px)
map-merge($font-sizes, $font-sizes2)
结果: "small": 12px, "normal": 18px, "large": 24px, "x-large": 30px, "xx-large": 36px

map-remove(map, keys...)	移除 map 中的 keys，多个 key 使用逗号隔开。
实例:
$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
map-remove($font-sizes, "small")
结果: ("normal": 18px, "large": 24px)

map-remove($font-sizes, "small", "large")
结果: ("normal": 18px)

map-values(map)	返回 map 中所有的 value 并生成一个队列。
实例:
$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
map-values($font-sizes)
结果: 12px, 18px, 24px


//选择器
is-superselector(super, sub)	
比较两个选择器匹配的范围，即判断 super 选择器是否包含了 sub 选择器所匹配的范围，是的话返回 true，否则返回 false。
实例:
is-superselector("div", "div.myInput")
结果: true
is-superselector("div.myInput", "div")
结果: false
is-superselector("div", "div")
结果: true

selector-append(selectors)	
将第二个 (也可以有多个) 添加到第一个选择器的后面。 selector.
实例:
selector-append("div", ".myInput")
结果: div.myInput
selector-append(".warning", "__a")
结果: .warning__a

selector-extend(selector, extendee, extender)
	 
	 
selector-nest(selectors)	
返回一个新的选择器，该选择器通过提供的列表选择器生成一个嵌套的列表。
实例:
selector-nest("ul", "li")
结果: ul li
selector-nest(".warning", "alert", "div")
结果: .warning div, alert div

selector-parse(selector)	将字符串的选择符 selector 转换成选择器队列。
实例:
selector-parse("h1 .myInput .warning")
结果: ('h1' '.myInput' '.warning')

selector-replace(selector, original, replacement)	
给定一个选择器，用replacement 替换 original 后返回一个新的选择器队列。
实例:
selector-replace("p.warning", "p", "div")
结果: div.warning

selector-unify(selector1, selector2)	
将两组选择器合成一个复合选择器。如两个选择器无法合成，则返回 null 值。
实例:
selector-unify("myInput", ".disabled")
结果: myInput.disabled
selector-unify("p", "h1")
结果: null

simple-selectors(selectors)	将合成选择器拆为单个选择器。
实例:
simple-selectors("div.myInput")
结果: div, .myInput
simple-selectors("div.myInput:before")
结果: div, .myInput, :before



//颜色
rgb(red, green, blue)	创建一个 Red-Green-Blue (RGB) 色。其中 R 是 "red" 表示红色，而 G 是 "green" 绿色，B 是 "blue" 蓝色。
实例:
rgb(0, 0, 255);

rgba(red, green, blue, alpha)	根据红、绿、蓝和透明度值创建一个颜色。
实例:
rgba(0, 0, 255, 0.3);

hsl(hue, saturation, lightness)	通过色相（hue）、饱和度(saturation)和亮度（lightness）的值创建一个颜色。
实例:
hsl(120, 100%, 50%); // 绿色
hsl(120, 100%, 75%); // 浅绿色
hsl(120, 100%, 25%); // dark green
hsl(120, 60%, 70%); // 柔和的绿色

hsla(hue, saturation, lightness, alpha)	通过色相（hue）、饱和度(saturation)、亮度（lightness）和透明（alpha）的值创建一个颜色。
实例:
hsl(120, 100%, 50%, 0.3); // 绿色带有透明度
hsl(120, 100%, 75%, 0.3); // 浅绿色带有透明度

grayscale(color)	将一个颜色变成灰色，相当于 desaturate( color,100%)。
实例:
grayscale(#7fffd4);
结果: #c6c6c6
complement(color)	返回一个补充色，相当于adjust-hue($color,180deg)。
实例:
complement(#7fffd4);
结果: #ff7faa
invert(color, weight)	返回一个反相色，红、绿、蓝色值倒过来，而透明度不变。
实例:
invert(white);
结果: black
Sass 颜色获取
函数	描述 & 实例
red(color)	从一个颜色中获取其中红色值（0-255）。
实例:
red(#7fffd4);
结果: 127
red(red);
结果: 255
green(color)	从一个颜色中获取其中绿色值（0-255）。
实例:
green(#7fffd4);
结果: 255
green(blue);
结果: 0
blue(color)	从一个颜色中获取其中蓝色值（0-255）。

实例:
blue(#7fffd4);
结果: 212
blue(blue);
结果: 255
hue(color)	返回颜色在 HSL 色值中的角度值 (0deg - 255deg)。
实例:
hue(#7fffd4);
结果: 160deg
saturation(color)	获取一个颜色的饱和度值(0% - 100%)。

实例:
saturation(#7fffd4);
结果: 100%
lightness(color)	获取一个颜色的亮度值(0% - 100%)。

实例:
lightness(#7fffd4);
结果: 74.9%
alpha(color)	Returns the alpha channel of color as a number between 0 and 1.

实例:
alpha(#7fffd4);
结果: 1
opacity(color)	获取颜色透明度值(0-1)。

实例:
opacity(rgba(127, 255, 212, 0.5);
结果: 0.5
Sass 颜色操作
函数	描述 & 实例
mix(color1, color2, weight)	把两种颜色混合起来。 weight 参数必须是 0% 到 100%。默认 weight 为 50%，表明新颜色各取 50% color1 和 color2 的色值相加。如果 weight 为 25%，那表明新颜色为 25% color1 和 75% color2 的色值相加。
adjust-hue(color, degrees)	通过改变一个颜色的色相值（-360deg - 360deg），创建一个新的颜色。

实例:
adjust-hue(#7fffd4, 80deg);
结果: #8080ff
adjust-color(color, red, green, blue, hue, saturation, lightness, alpha)	这个函数能够调整给定色彩的一个或多个属性值，包括 RGB 和 HSL 色彩的各项色值参数，另外还有 alpha 通道的取值。这些属性值的调整依赖传入的关键值参数，通过这些参数再与给定颜色相应的色彩值做加减运算。

实例:
adjust-color(#7fffd4, blue: 25);
结果:
change-color(color, red, green, blue, hue, saturation, lightness, alpha)	跟上面 adjust-color 类似，只是在该函数中传入的参数将直接替换原来的值，而不做任何的运算。

实例:
change-color(#7fffd4, red: 255);
结果: #ffffd4
scale-color(color, red, green, blue,  saturation, lightness, alpha)	另一种实用的颜色调节函数。adjust-color 通过传入的参数简单的与本身的色值参数做加减，有时候可能会导致累加值溢出，当然，函数会把结果控制在有效的阈值内。而 scale-color 函数则避免了这种情况，可以不必担心溢出，让参数在阈值范围内进行有效的调节。

举个例子，一个颜色的亮度 lightness 取值在 0% ~ 100% 之间，假如执行 scale-color($color, $lightness: 40%)，表明该颜色的亮度将有 (100 - 原始值) × 40% 的增幅。

另一个例子，执行 scale-color($color, $lightness: -40%)，表明这个颜色的亮度将减少 (原始值 - 0) × 40% 这么多的值。

所有传参的取值范围都在 0% ~ 100% 之间，并且 RGB 同 HSL 的传参不能冲突。

scale-color(hsl(120, 70%, 80%), $lightness: 50%) => hsl(120, 70%, 90%)
scale-color(rgb(200, 150, 170), $green: -40%, $blue: 70%) => rgb(200, 90, 229)
scale-color(hsl(200, 70%, 80%), $saturation: -90%, $alpha: -30%) => hsla(200, 7%, 80%, 0.7)
rgba(color, alpha)	根据红、绿、蓝和透明度值创建一个颜色。

实例:
rgba(#7fffd4, 30%);
结果: rgba(127, 255, 212, 0.3)
lighten(color, amount)	通过改变颜色的亮度值（0% - 100%），让颜色变亮，创建一个新的颜色。
darken(color, amount)	通过改变颜色的亮度值（0% - 100%），让颜色变暗，创建一个新的颜色。
saturate(color, amount)	提高传入颜色的色彩饱和度。等同于 adjust-color( color, saturation: amount)
desaturate(color, amount)	调低一个颜色的饱和度后产生一个新的色值。同样，饱和度的取值区间在 0% ~ 100%。等同于 adjust-color(color, saturation: -amount)
opacify(color, amount)	降低颜色的透明度，取值在 0-1 之。等价于 adjust-color(color, alpha: amount)
fade-in(color, amount)	降低颜色的透明度，取值在 0-1 之。等价于 adjust-color(color, alpha: amount)
transparentize(color, amount)	提升颜色的透明度，取值在 0-1 之间。等价于 adjust-color(color, alpha: -amount)
fade-out(color, amount)	提升颜色的透明度，取值在 0-1 之间。等价于 adjust-color(color, alpha: -amount)

